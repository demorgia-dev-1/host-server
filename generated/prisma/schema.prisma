// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum ExamType {
  THEORY
  PRACTICAL
  VIVA
}

model Batch {
  id                                    String         @id @map("_id")
  assessor                              String
  name                                  String
  type                                  String
  status                                String
  noOfCandidates                        Int
  durationInMin                         Int
  no                                    String
  startDate                             DateTime
  endDate                               DateTime
  theoryQuestionBank                    String
  practicalQuestionBank                 String
  vivaQuestionBank                      String
  isAssessorReached                     Boolean
  isCandidateVideoRequired              Boolean
  isCandidatePhotosRequired             Boolean
  isCandidateLocationRequired           Boolean
  isCandidateAdharRequired              Boolean
  isCandidateSelfieRequired             Boolean
  isPracticalVisibleToCandidate         Boolean
  isSuspiciousActivityDetectionRequired Boolean
  isAssessorEvidenceRequired            Boolean
  assessorReachedAt                     DateTime?
  assessorCoordinates                   String?
  assessorGroupPhoto                    String?
  candidates                            Candidate[]
  examResponses                         ExamResponse[]

  @@map("batches")
}

model Candidate {
  id                         String         @id @map("_id")
  name                       String?
  email                      String?
  phone                      String?
  address                    String?
  batchId                    String
  fatherName                 String?
  enrollmentNo               String
  isActive                   Boolean
  password                   String
  gender                     String?
  adharNo                    String?
  isTheoryStarted            Boolean
  isEvidanceUploaded         Boolean
  isPresentInTheory          Boolean
  isPresentInPractical       Boolean
  isPresentInViva            Boolean
  isTheorySubmitted          Boolean
  theoryExamStatus           String
  practicalExamStatus        String
  vivaExamStatus             String
  multipleFaceDetectionCount Int
  faceHiddenCount            Int
  tabSwitchCount             Int
  exitFullScreenCount        Int
  theoryStartedAt            DateTime?
  theorySubmittedAt          DateTime?
  candidateSelfieCoordinates String?
  candidateSelfieTakenAt     DateTime?
  candidateSelfie            String?
  adharPicture               String?
  resetedAt                  DateTime?
  practicalStartedAt         DateTime?
  practicalSubmittedAt       DateTime?
  batch                      Batch          @relation(fields: [batchId], references: [id], onDelete: Cascade)
  examResponses              ExamResponse[]

  @@map("candidates") // optional: name of the table in DB
}

model ExamResponse {
  candidateId   String
  batchId       String
  questionId    String
  answerId      String
  startedAt     DateTime
  endedAt       DateTime
  type          ExamType  @default(THEORY)
  marksObtained Int       @default(0)
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  batch         Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@id([questionId, candidateId])
  @@map("exam_response")
}
